
l151.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001670  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017c8  080017c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017c8  080017c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017c8  080017c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080017dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080017dc  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c07  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fdb  00000000  00000000  00023c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004a8  00000000  00000000  00024c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000410  00000000  00000000  000250c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012ac5  00000000  00000000  000254d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004a24  00000000  00000000  00037f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073418  00000000  00000000  0003c9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000afdd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010b0  00000000  00000000  000afe4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001794 	.word	0x08001794

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001794 	.word	0x08001794

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 f9e3 	bl	800054a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f81c 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f864 	bl	8000254 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  	  blink();
 800018c:	f000 f8f8 	bl	8000380 <blink>
//  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
//  	  HAL_Delay (5000);
//  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);

  	  get_sleep();
 8000190:	f000 f8ea 	bl	8000368 <get_sleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET ) {
 8000194:	2101      	movs	r1, #1
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <main+0x40>)
 8000198:	f000 fd10 	bl	8000bbc <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d105      	bne.n	80001ae <main+0x32>
	      // на выводе PB12 высокий уровень, кнопка отжата
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	2102      	movs	r1, #2
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <main+0x40>)
 80001a8:	f000 fd1f 	bl	8000bea <HAL_GPIO_WritePin>
 80001ac:	e7f2      	b.n	8000194 <main+0x18>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2102      	movs	r1, #2
 80001b2:	4802      	ldr	r0, [pc, #8]	; (80001bc <main+0x40>)
 80001b4:	f000 fd19 	bl	8000bea <HAL_GPIO_WritePin>
	  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET ) {
 80001b8:	e7ec      	b.n	8000194 <main+0x18>
 80001ba:	bf00      	nop
 80001bc:	40020800 	.word	0x40020800

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b092      	sub	sp, #72	; 0x48
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0314 	add.w	r3, r7, #20
 80001ca:	2234      	movs	r2, #52	; 0x34
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fad8 	bl	8001784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	463b      	mov	r3, r7
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001e2:	4b1b      	ldr	r3, [pc, #108]	; (8000250 <SystemClock_Config+0x90>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80001ea:	4a19      	ldr	r2, [pc, #100]	; (8000250 <SystemClock_Config+0x90>)
 80001ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001f0:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fa:	2300      	movs	r3, #0
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0314 	add.w	r3, r7, #20
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fd48 	bl	8000c98 <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x52>
  {
    Error_Handler();
 800020e:	f000 f8dd 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000216:	2302      	movs	r3, #2
 8000218:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000226:	463b      	mov	r3, r7
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f864 	bl	80012f8 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000236:	f000 f8c9 	bl	80003cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800023a:	2200      	movs	r2, #0
 800023c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000240:	2000      	movs	r0, #0
 8000242:	f001 f98d 	bl	8001560 <HAL_RCC_MCOConfig>
}
 8000246:	bf00      	nop
 8000248:	3748      	adds	r7, #72	; 0x48
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40007000 	.word	0x40007000

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026a:	4b30      	ldr	r3, [pc, #192]	; (800032c <MX_GPIO_Init+0xd8>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	4a2f      	ldr	r2, [pc, #188]	; (800032c <MX_GPIO_Init+0xd8>)
 8000270:	f043 0304 	orr.w	r3, r3, #4
 8000274:	61d3      	str	r3, [r2, #28]
 8000276:	4b2d      	ldr	r3, [pc, #180]	; (800032c <MX_GPIO_Init+0xd8>)
 8000278:	69db      	ldr	r3, [r3, #28]
 800027a:	f003 0304 	and.w	r3, r3, #4
 800027e:	60bb      	str	r3, [r7, #8]
 8000280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000282:	4b2a      	ldr	r3, [pc, #168]	; (800032c <MX_GPIO_Init+0xd8>)
 8000284:	69db      	ldr	r3, [r3, #28]
 8000286:	4a29      	ldr	r2, [pc, #164]	; (800032c <MX_GPIO_Init+0xd8>)
 8000288:	f043 0320 	orr.w	r3, r3, #32
 800028c:	61d3      	str	r3, [r2, #28]
 800028e:	4b27      	ldr	r3, [pc, #156]	; (800032c <MX_GPIO_Init+0xd8>)
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	f003 0320 	and.w	r3, r3, #32
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b24      	ldr	r3, [pc, #144]	; (800032c <MX_GPIO_Init+0xd8>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <MX_GPIO_Init+0xd8>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	61d3      	str	r3, [r2, #28]
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <MX_GPIO_Init+0xd8>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2103      	movs	r1, #3
 80002b6:	481e      	ldr	r0, [pc, #120]	; (8000330 <MX_GPIO_Init+0xdc>)
 80002b8:	f000 fc97 	bl	8000bea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MX_GPIO_Init+0xe0>)
 80002c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	4619      	mov	r1, r3
 80002d0:	4817      	ldr	r0, [pc, #92]	; (8000330 <MX_GPIO_Init+0xdc>)
 80002d2:	f000 faf5 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80002d6:	2303      	movs	r3, #3
 80002d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002da:	2301      	movs	r3, #1
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4619      	mov	r1, r3
 80002ec:	4810      	ldr	r0, [pc, #64]	; (8000330 <MX_GPIO_Init+0xdc>)
 80002ee:	f000 fae7 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002f8:	2302      	movs	r3, #2
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000300:	2303      	movs	r3, #3
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	4619      	mov	r1, r3
 800030e:	480a      	ldr	r0, [pc, #40]	; (8000338 <MX_GPIO_Init+0xe4>)
 8000310:	f000 fad6 	bl	80008c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000314:	2200      	movs	r2, #0
 8000316:	2100      	movs	r1, #0
 8000318:	2028      	movs	r0, #40	; 0x28
 800031a:	f000 fa9a 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800031e:	2028      	movs	r0, #40	; 0x28
 8000320:	f000 fab3 	bl	800088a <HAL_NVIC_EnableIRQ>

}
 8000324:	bf00      	nop
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40023800 	.word	0x40023800
 8000330:	40020800 	.word	0x40020800
 8000334:	10110000 	.word	0x10110000
 8000338:	40020000 	.word	0x40020000

0800033c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin== GPIO_PIN_13) {
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800034c:	d103      	bne.n	8000356 <HAL_GPIO_EXTI_Callback+0x1a>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
		FLAG_INTERRUPT_EVENT=1;
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_GPIO_EXTI_Callback+0x28>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
//	else if(GPIO_Pin== GPIO_PIN_2){
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
//	} else{
//	__NOP();
//	}
}
 8000354:	e000      	b.n	8000358 <HAL_GPIO_EXTI_Callback+0x1c>
		__NOP();
 8000356:	bf00      	nop
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000028 	.word	0x20000028

08000368 <get_sleep>:

void get_sleep()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	  HAL_SuspendTick();
 800036c:	f000 f97e 	bl	800066c <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000370:	2101      	movs	r1, #1
 8000372:	2000      	movs	r0, #0
 8000374:	f000 fc6a 	bl	8000c4c <HAL_PWR_EnterSLEEPMode>
	  HAL_ResumeTick();
 8000378:	f000 f986 	bl	8000688 <HAL_ResumeTick>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <blink>:

void blink()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
    for(int8_t i=0; i<6; ++i){
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	e015      	b.n	80003b8 <blink+0x38>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2102      	movs	r1, #2
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <blink+0x48>)
 8000392:	f000 fc2a 	bl	8000bea <HAL_GPIO_WritePin>
    	HAL_Delay (500);
 8000396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800039a:	f000 f945 	bl	8000628 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2102      	movs	r1, #2
 80003a2:	4809      	ldr	r0, [pc, #36]	; (80003c8 <blink+0x48>)
 80003a4:	f000 fc21 	bl	8000bea <HAL_GPIO_WritePin>
    	HAL_Delay (500);
 80003a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ac:	f000 f93c 	bl	8000628 <HAL_Delay>
    for(int8_t i=0; i<6; ++i){
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	3301      	adds	r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	71fb      	strb	r3, [r7, #7]
 80003b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003bc:	2b05      	cmp	r3, #5
 80003be:	dde5      	ble.n	800038c <blink+0xc>
    }
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40020800 	.word	0x40020800

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <HAL_MspInit+0x58>)
 80003e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e2:	4a13      	ldr	r2, [pc, #76]	; (8000430 <HAL_MspInit+0x58>)
 80003e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003e8:	6253      	str	r3, [r2, #36]	; 0x24
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <HAL_MspInit+0x58>)
 80003ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <HAL_MspInit+0x58>)
 80003f8:	6a1b      	ldr	r3, [r3, #32]
 80003fa:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <HAL_MspInit+0x58>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6213      	str	r3, [r2, #32]
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <HAL_MspInit+0x58>)
 8000404:	6a1b      	ldr	r3, [r3, #32]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <HAL_MspInit+0x58>)
 8000410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000412:	4a07      	ldr	r2, [pc, #28]	; (8000430 <HAL_MspInit+0x58>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	6253      	str	r3, [r2, #36]	; 0x24
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_MspInit+0x58>)
 800041c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <HardFault_Handler+0x4>

08000446 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <MemManage_Handler+0x4>

0800044c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <BusFault_Handler+0x4>

08000452 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <UsageFault_Handler+0x4>

08000458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 f8b6 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800048c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000490:	f000 fbc4 	bl	8000c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <SystemInit+0x5c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <SystemInit+0x5c>)
 80004a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <SystemInit+0x5c>)
 80004aa:	689a      	ldr	r2, [r3, #8]
 80004ac:	4911      	ldr	r1, [pc, #68]	; (80004f4 <SystemInit+0x5c>)
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <SystemInit+0x60>)
 80004b0:	4013      	ands	r3, r2
 80004b2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <SystemInit+0x5c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <SystemInit+0x5c>)
 80004ba:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80004be:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80004c2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <SystemInit+0x5c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <SystemInit+0x5c>)
 80004ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ce:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <SystemInit+0x5c>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <SystemInit+0x5c>)
 80004d6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80004da:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <SystemInit+0x5c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <SystemInit+0x64>)
 80004e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004e8:	609a      	str	r2, [r3, #8]
#endif
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40023800 	.word	0x40023800
 80004f8:	88ffc00c 	.word	0x88ffc00c
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000500:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000502:	e003      	b.n	800050c <LoopCopyDataInit>

08000504 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000506:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000508:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800050a:	3104      	adds	r1, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000510:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000512:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000514:	d3f6      	bcc.n	8000504 <CopyDataInit>
  ldr r2, =_sbss
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000518:	e002      	b.n	8000520 <LoopFillZerobss>

0800051a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800051c:	f842 3b04 	str.w	r3, [r2], #4

08000520 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000522:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000524:	d3f9      	bcc.n	800051a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000526:	f7ff ffb7 	bl	8000498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052a:	f001 f907 	bl	800173c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff fe25 	bl	800017c <main>
  bx lr
 8000532:	4770      	bx	lr
  ldr r3, =_sidata
 8000534:	080017d0 	.word	0x080017d0
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800053c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000540:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000544:	20000030 	.word	0x20000030

08000548 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_IRQHandler>

0800054a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000550:	2300      	movs	r3, #0
 8000552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000554:	2003      	movs	r0, #3
 8000556:	f000 f971 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f80e 	bl	800057c <HAL_InitTick>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	e001      	b.n	8000570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800056c:	f7ff ff34 	bl	80003d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000570:	79fb      	ldrb	r3, [r7, #7]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_InitTick+0x68>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d022      	beq.n	80005d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <HAL_InitTick+0x6c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_InitTick+0x68>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800059c:	fbb1 f3f3 	udiv	r3, r1, r3
 80005a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f97e 	bl	80008a6 <HAL_SYSTICK_Config>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10f      	bne.n	80005d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b0f      	cmp	r3, #15
 80005b4:	d809      	bhi.n	80005ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b6:	2200      	movs	r2, #0
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	f04f 30ff 	mov.w	r0, #4294967295
 80005be:	f000 f948 	bl	8000852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <HAL_InitTick+0x70>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	e007      	b.n	80005da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e004      	b.n	80005da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	e001      	b.n	80005da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_IncTick+0x1c>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x20>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x1c>)
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000002c 	.word	0x2000002c
 8000610:	20000008 	.word	0x20000008

08000614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return uwTick;
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <HAL_GetTick+0x10>)
 800061a:	681b      	ldr	r3, [r3, #0]
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	2000002c 	.word	0x2000002c

08000628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff fff0 	bl	8000614 <HAL_GetTick>
 8000634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d004      	beq.n	800064c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_Delay+0x40>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800064c:	bf00      	nop
 800064e:	f7ff ffe1 	bl	8000614 <HAL_GetTick>
 8000652:	4602      	mov	r2, r0
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	429a      	cmp	r2, r3
 800065c:	d8f7      	bhi.n	800064e <HAL_Delay+0x26>
  {
  }
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000008 	.word	0x20000008

0800066c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SuspendTick+0x18>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_SuspendTick+0x18>)
 8000676:	f023 0302 	bic.w	r3, r3, #2
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <HAL_ResumeTick+0x18>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <HAL_ResumeTick+0x18>)
 8000692:	f043 0302 	orr.w	r3, r3, #2
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	e000e010 	.word	0xe000e010

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db0b      	blt.n	8000732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 021f 	and.w	r2, r3, #31
 8000720:	4906      	ldr	r1, [pc, #24]	; (800073c <__NVIC_EnableIRQ+0x34>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	095b      	lsrs	r3, r3, #5
 8000728:	2001      	movs	r0, #1
 800072a:	fa00 f202 	lsl.w	r2, r0, r2
 800072e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff90 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff2d 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff42 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff90 	bl	8000794 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5f 	bl	8000740 <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff35 	bl	8000708 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80008d6:	e154      	b.n	8000b82 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f000 8146 	beq.w	8000b7c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d003      	beq.n	8000900 <HAL_GPIO_Init+0x40>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b12      	cmp	r3, #18
 80008fe:	d123      	bne.n	8000948 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	08da      	lsrs	r2, r3, #3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3208      	adds	r2, #8
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f003 0307 	and.w	r3, r3, #7
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	220f      	movs	r2, #15
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	08da      	lsrs	r2, r3, #3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3208      	adds	r2, #8
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0203 	and.w	r2, r3, #3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d00b      	beq.n	800099c <HAL_GPIO_Init+0xdc>
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d007      	beq.n	800099c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000990:	2b11      	cmp	r3, #17
 8000992:	d003      	beq.n	800099c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b12      	cmp	r3, #18
 800099a:	d130      	bne.n	80009fe <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009d2:	2201      	movs	r2, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 0201 	and.w	r2, r3, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 80a0 	beq.w	8000b7c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	4b57      	ldr	r3, [pc, #348]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	4a56      	ldr	r2, [pc, #344]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6213      	str	r3, [r2, #32]
 8000a48:	4b54      	ldr	r3, [pc, #336]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000a54:	4a52      	ldr	r2, [pc, #328]	; (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a4a      	ldr	r2, [pc, #296]	; (8000ba4 <HAL_GPIO_Init+0x2e4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d019      	beq.n	8000ab4 <HAL_GPIO_Init+0x1f4>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <HAL_GPIO_Init+0x2e8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d013      	beq.n	8000ab0 <HAL_GPIO_Init+0x1f0>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a48      	ldr	r2, [pc, #288]	; (8000bac <HAL_GPIO_Init+0x2ec>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00d      	beq.n	8000aac <HAL_GPIO_Init+0x1ec>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a47      	ldr	r2, [pc, #284]	; (8000bb0 <HAL_GPIO_Init+0x2f0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0x1e8>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <HAL_GPIO_Init+0x2f4>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	e008      	b.n	8000ab6 <HAL_GPIO_Init+0x1f6>
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	e006      	b.n	8000ab6 <HAL_GPIO_Init+0x1f6>
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e004      	b.n	8000ab6 <HAL_GPIO_Init+0x1f6>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e002      	b.n	8000ab6 <HAL_GPIO_Init+0x1f6>
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e000      	b.n	8000ab6 <HAL_GPIO_Init+0x1f6>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	f002 0203 	and.w	r2, r2, #3
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	4093      	lsls	r3, r2
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ac6:	4936      	ldr	r1, [pc, #216]	; (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000af8:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b22:	4a25      	ldr	r2, [pc, #148]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b28:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_GPIO_Init+0x2f8>)
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f47f aea3 	bne.w	80008d8 <HAL_GPIO_Init+0x18>
  } 
}
 8000b92:	bf00      	nop
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bfa:	787b      	ldrb	r3, [r7, #1]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000c06:	e003      	b.n	8000c10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	041a      	lsls	r2, r3, #16
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	619a      	str	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fb7e 	bl	800033c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_PWR_EnterSLEEPMode+0x44>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 0203 	bic.w	r2, r3, #3
 8000c60:	490b      	ldr	r1, [pc, #44]	; (8000c90 <HAL_PWR_EnterSLEEPMode+0x44>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_PWR_EnterSLEEPMode+0x48>)
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <HAL_PWR_EnterSLEEPMode+0x48>)
 8000c6e:	f023 0304 	bic.w	r3, r3, #4
 8000c72:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_PWR_EnterSLEEPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000c7a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000c7c:	e002      	b.n	8000c84 <HAL_PWR_EnterSLEEPMode+0x38>
    __SEV();
 8000c7e:	bf40      	sev
    __WFE();
 8000c80:	bf20      	wfe
    __WFE();
 8000c82:	bf20      	wfe
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40007000 	.word	0x40007000
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e31d      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000caa:	4b94      	ldr	r3, [pc, #592]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb4:	4b91      	ldr	r3, [pc, #580]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d07b      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d006      	beq.n	8000cde <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2b0c      	cmp	r3, #12
 8000cd4:	d10f      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x5e>
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cde:	4b87      	ldr	r3, [pc, #540]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d06a      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x128>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d166      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e2f7      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d106      	bne.n	8000d0c <HAL_RCC_OscConfig+0x74>
 8000cfe:	4b7f      	ldr	r3, [pc, #508]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a7e      	ldr	r2, [pc, #504]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e02d      	b.n	8000d68 <HAL_RCC_OscConfig+0xd0>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10c      	bne.n	8000d2e <HAL_RCC_OscConfig+0x96>
 8000d14:	4b79      	ldr	r3, [pc, #484]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a78      	ldr	r2, [pc, #480]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b76      	ldr	r3, [pc, #472]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a75      	ldr	r2, [pc, #468]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e01c      	b.n	8000d68 <HAL_RCC_OscConfig+0xd0>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0xb8>
 8000d36:	4b71      	ldr	r3, [pc, #452]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a70      	ldr	r2, [pc, #448]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b6e      	ldr	r3, [pc, #440]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a6d      	ldr	r2, [pc, #436]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e00b      	b.n	8000d68 <HAL_RCC_OscConfig+0xd0>
 8000d50:	4b6a      	ldr	r3, [pc, #424]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a69      	ldr	r2, [pc, #420]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b67      	ldr	r3, [pc, #412]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a66      	ldr	r2, [pc, #408]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc50 	bl	8000614 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fc4c 	bl	8000614 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	; 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e2ad      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0xe0>
 8000d96:	e014      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc3c 	bl	8000614 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fc38 	bl	8000614 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e299      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000db2:	4b52      	ldr	r3, [pc, #328]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x108>
 8000dbe:	e000      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d05a      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d005      	beq.n	8000de0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	2b0c      	cmp	r3, #12
 8000dd8:	d119      	bne.n	8000e0e <HAL_RCC_OscConfig+0x176>
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d116      	bne.n	8000e0e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_RCC_OscConfig+0x160>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d001      	beq.n	8000df8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e276      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b40      	ldr	r3, [pc, #256]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	493d      	ldr	r1, [pc, #244]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0c:	e03a      	b.n	8000e84 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d020      	beq.n	8000e58 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <HAL_RCC_OscConfig+0x268>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fbfa 	bl	8000614 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fbf6 	bl	8000614 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e257      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f0      	beq.n	8000e24 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	492a      	ldr	r1, [pc, #168]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	604b      	str	r3, [r1, #4]
 8000e56:	e015      	b.n	8000e84 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <HAL_RCC_OscConfig+0x268>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fbd9 	bl	8000614 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e66:	f7ff fbd5 	bl	8000614 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e236      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 80b8 	beq.w	8001002 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d170      	bne.n	8000f7a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x218>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e21a      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d921      	bls.n	8000f04 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fbd9 	bl	800167c <RCC_SetFlashLatencyFromMSIRange>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e208      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4906      	ldr	r1, [pc, #24]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	061b      	lsls	r3, r3, #24
 8000ef4:	4901      	ldr	r1, [pc, #4]	; (8000efc <HAL_RCC_OscConfig+0x264>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
 8000efa:	e020      	b.n	8000f3e <HAL_RCC_OscConfig+0x2a6>
 8000efc:	40023800 	.word	0x40023800
 8000f00:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f04:	4ba4      	ldr	r3, [pc, #656]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	49a1      	ldr	r1, [pc, #644]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f16:	4ba0      	ldr	r3, [pc, #640]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	061b      	lsls	r3, r3, #24
 8000f24:	499c      	ldr	r1, [pc, #624]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fba4 	bl	800167c <RCC_SetFlashLatencyFromMSIRange>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e1d3      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	0b5b      	lsrs	r3, r3, #13
 8000f44:	3301      	adds	r3, #1
 8000f46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f4e:	4a92      	ldr	r2, [pc, #584]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000f50:	6892      	ldr	r2, [r2, #8]
 8000f52:	0912      	lsrs	r2, r2, #4
 8000f54:	f002 020f 	and.w	r2, r2, #15
 8000f58:	4990      	ldr	r1, [pc, #576]	; (800119c <HAL_RCC_OscConfig+0x504>)
 8000f5a:	5c8a      	ldrb	r2, [r1, r2]
 8000f5c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f5e:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <HAL_RCC_OscConfig+0x508>)
 8000f60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f62:	4b90      	ldr	r3, [pc, #576]	; (80011a4 <HAL_RCC_OscConfig+0x50c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fb08 	bl	800057c <HAL_InitTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d045      	beq.n	8001002 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	e1b5      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d029      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f82:	4b89      	ldr	r3, [pc, #548]	; (80011a8 <HAL_RCC_OscConfig+0x510>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fb44 	bl	8000614 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f90:	f7ff fb40 	bl	8000614 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e1a1      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fa2:	4b7d      	ldr	r3, [pc, #500]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fae:	4b7a      	ldr	r3, [pc, #488]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4977      	ldr	r1, [pc, #476]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc0:	4b75      	ldr	r3, [pc, #468]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	061b      	lsls	r3, r3, #24
 8000fce:	4972      	ldr	r1, [pc, #456]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
 8000fd4:	e015      	b.n	8001002 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fd6:	4b74      	ldr	r3, [pc, #464]	; (80011a8 <HAL_RCC_OscConfig+0x510>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb1a 	bl	8000614 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fb16 	bl	8000614 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e177      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000ff6:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d030      	beq.n	8001070 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d016      	beq.n	8001044 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001016:	4b65      	ldr	r3, [pc, #404]	; (80011ac <HAL_RCC_OscConfig+0x514>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff fafa 	bl	8000614 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff faf6 	bl	8000614 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e157      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001036:	4b58      	ldr	r3, [pc, #352]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0x38c>
 8001042:	e015      	b.n	8001070 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_OscConfig+0x514>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fae3 	bl	8000614 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001052:	f7ff fadf 	bl	8000614 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e140      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001064:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f0      	bne.n	8001052 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80b5 	beq.w	80011e8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10d      	bne.n	80010aa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	4a41      	ldr	r2, [pc, #260]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6253      	str	r3, [r2, #36]	; 0x24
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a6:	2301      	movs	r3, #1
 80010a8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_RCC_OscConfig+0x518>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d118      	bne.n	80010e8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <HAL_RCC_OscConfig+0x518>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <HAL_RCC_OscConfig+0x518>)
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c2:	f7ff faa7 	bl	8000614 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ca:	f7ff faa3 	bl	8000614 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b64      	cmp	r3, #100	; 0x64
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e104      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_RCC_OscConfig+0x518>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d106      	bne.n	80010fe <HAL_RCC_OscConfig+0x466>
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6353      	str	r3, [r2, #52]	; 0x34
 80010fc:	e02d      	b.n	800115a <HAL_RCC_OscConfig+0x4c2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x488>
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 800110c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001110:	6353      	str	r3, [r2, #52]	; 0x34
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800111c:	6353      	str	r3, [r2, #52]	; 0x34
 800111e:	e01c      	b.n	800115a <HAL_RCC_OscConfig+0x4c2>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b05      	cmp	r3, #5
 8001126:	d10c      	bne.n	8001142 <HAL_RCC_OscConfig+0x4aa>
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 800112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6353      	str	r3, [r2, #52]	; 0x34
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6353      	str	r3, [r2, #52]	; 0x34
 8001140:	e00b      	b.n	800115a <HAL_RCC_OscConfig+0x4c2>
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800114c:	6353      	str	r3, [r2, #52]	; 0x34
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	4a11      	ldr	r2, [pc, #68]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001158:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d015      	beq.n	800118e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fa57 	bl	8000614 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f7ff fa53 	bl	8000614 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e0b2      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0ee      	beq.n	800116a <HAL_RCC_OscConfig+0x4d2>
 800118c:	e023      	b.n	80011d6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff fa41 	bl	8000614 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001194:	e019      	b.n	80011ca <HAL_RCC_OscConfig+0x532>
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	080017b8 	.word	0x080017b8
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000004 	.word	0x20000004
 80011a8:	42470020 	.word	0x42470020
 80011ac:	42470680 	.word	0x42470680
 80011b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f7ff fa2e 	bl	8000614 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e08d      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 80011cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1ee      	bne.n	80011b4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d105      	bne.n	80011e8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 80011e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d079      	beq.n	80012e4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b0c      	cmp	r3, #12
 80011f4:	d056      	beq.n	80012a4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d13b      	bne.n	8001276 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_RCC_OscConfig+0x65c>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fa06 	bl	8000614 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff fa02 	bl	8000614 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e063      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	4319      	orrs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	430b      	orrs	r3, r1
 8001242:	492b      	ldr	r1, [pc, #172]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_RCC_OscConfig+0x65c>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff f9e1 	bl	8000614 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001256:	f7ff f9dd 	bl	8000614 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e03e      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x5be>
 8001274:	e036      	b.n	80012e4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_RCC_OscConfig+0x65c>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff f9ca 	bl	8000614 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff f9c6 	bl	8000614 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e027      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x5ec>
 80012a2:	e01f      	b.n	80012e4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e01a      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_RCC_OscConfig+0x658>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d10d      	bne.n	80012e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	42470060 	.word	0x42470060

080012f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e11a      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d919      	bls.n	800134e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_RCC_ClockConfig+0x34>
 8001320:	4b8a      	ldr	r3, [pc, #552]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a89      	ldr	r2, [pc, #548]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b87      	ldr	r3, [pc, #540]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 0201 	bic.w	r2, r3, #1
 8001334:	4985      	ldr	r1, [pc, #532]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133c:	4b83      	ldr	r3, [pc, #524]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d001      	beq.n	800134e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0f9      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135a:	4b7d      	ldr	r3, [pc, #500]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	497a      	ldr	r1, [pc, #488]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 808e 	beq.w	8001496 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001382:	4b73      	ldr	r3, [pc, #460]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d121      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0d7      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800139a:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d115      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e0cb      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0bf      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0b7      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f023 0203 	bic.w	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	495c      	ldr	r1, [pc, #368]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013e4:	f7ff f916 	bl	8000614 <HAL_GetTick>
 80013e8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f7ff f90e 	bl	8000614 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e09b      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d1ee      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xfc>
 8001416:	e03e      	b.n	8001496 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d112      	bne.n	8001446 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001422:	f7ff f8f7 	bl	8000614 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e084      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001438:	4b45      	ldr	r3, [pc, #276]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_ClockConfig+0x12a>
 8001444:	e027      	b.n	8001496 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d11d      	bne.n	800148a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001450:	f7ff f8e0 	bl	8000614 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e06d      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b04      	cmp	r3, #4
 8001470:	d1ee      	bne.n	8001450 <HAL_RCC_ClockConfig+0x158>
 8001472:	e010      	b.n	8001496 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff f8ce 	bl	8000614 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e05b      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d219      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_ClockConfig+0x1be>
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0201 	bic.w	r2, r3, #1
 80014be:	4923      	ldr	r1, [pc, #140]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_RCC_ClockConfig+0x254>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e034      	b.n	8001542 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4917      	ldr	r1, [pc, #92]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	490f      	ldr	r1, [pc, #60]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001516:	f000 f859 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 800151a:	4601      	mov	r1, r0
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCC_ClockConfig+0x258>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x25c>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	fa21 f303 	lsr.w	r3, r1, r3
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x260>)
 8001530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_RCC_ClockConfig+0x264>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f820 	bl	800057c <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001540:	7afb      	ldrb	r3, [r7, #11]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023c00 	.word	0x40023c00
 8001550:	40023800 	.word	0x40023800
 8001554:	080017b8 	.word	0x080017b8
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_RCC_MCOConfig+0x64>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_RCC_MCOConfig+0x64>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_RCC_MCOConfig+0x64>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_RCC_MCOConfig+0x68>)
 80015a2:	f7ff f98d 	bl	80008c0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_RCC_MCOConfig+0x64>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	430b      	orrs	r3, r1
 80015b4:	4903      	ldr	r1, [pc, #12]	; (80015c4 <HAL_RCC_MCOConfig+0x64>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d006      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x24>
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d007      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x2a>
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d12c      	bne.n	8001644 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015ec:	613b      	str	r3, [r7, #16]
      break;
 80015ee:	e037      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_GetSysClockFreq+0xa8>)
 80015f2:	613b      	str	r3, [r7, #16]
      break;
 80015f4:	e034      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	0c9b      	lsrs	r3, r3, #18
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_RCC_GetSysClockFreq+0xac>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	0d9b      	lsrs	r3, r3, #22
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	3301      	adds	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001620:	fb02 f203 	mul.w	r2, r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e007      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001632:	fb02 f203 	mul.w	r2, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	fbb2 f3f3 	udiv	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	613b      	str	r3, [r7, #16]
      break;
 8001642:	e00d      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0b5b      	lsrs	r3, r3, #13
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	613b      	str	r3, [r7, #16]
      break;
 800165e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001660:	693b      	ldr	r3, [r7, #16]
}
 8001662:	4618      	mov	r0, r3
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40023800 	.word	0x40023800
 8001670:	00f42400 	.word	0x00f42400
 8001674:	007a1200 	.word	0x007a1200
 8001678:	080017ac 	.word	0x080017ac

0800167c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d12c      	bne.n	80016ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e016      	b.n	80016da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b6:	6253      	str	r3, [r2, #36]	; 0x24
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80016cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80016e0:	d105      	bne.n	80016ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80016e8:	d101      	bne.n	80016ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80016ea:	2301      	movs	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 0201 	bic.w	r2, r3, #1
 8001708:	490b      	ldr	r1, [pc, #44]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	429a      	cmp	r2, r3
 800171c:	d001      	beq.n	8001722 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
 8001738:	40023c00 	.word	0x40023c00

0800173c <__libc_init_array>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	2500      	movs	r5, #0
 8001740:	4e0c      	ldr	r6, [pc, #48]	; (8001774 <__libc_init_array+0x38>)
 8001742:	4c0d      	ldr	r4, [pc, #52]	; (8001778 <__libc_init_array+0x3c>)
 8001744:	1ba4      	subs	r4, r4, r6
 8001746:	10a4      	asrs	r4, r4, #2
 8001748:	42a5      	cmp	r5, r4
 800174a:	d109      	bne.n	8001760 <__libc_init_array+0x24>
 800174c:	f000 f822 	bl	8001794 <_init>
 8001750:	2500      	movs	r5, #0
 8001752:	4e0a      	ldr	r6, [pc, #40]	; (800177c <__libc_init_array+0x40>)
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <__libc_init_array+0x44>)
 8001756:	1ba4      	subs	r4, r4, r6
 8001758:	10a4      	asrs	r4, r4, #2
 800175a:	42a5      	cmp	r5, r4
 800175c:	d105      	bne.n	800176a <__libc_init_array+0x2e>
 800175e:	bd70      	pop	{r4, r5, r6, pc}
 8001760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001764:	4798      	blx	r3
 8001766:	3501      	adds	r5, #1
 8001768:	e7ee      	b.n	8001748 <__libc_init_array+0xc>
 800176a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800176e:	4798      	blx	r3
 8001770:	3501      	adds	r5, #1
 8001772:	e7f2      	b.n	800175a <__libc_init_array+0x1e>
 8001774:	080017c8 	.word	0x080017c8
 8001778:	080017c8 	.word	0x080017c8
 800177c:	080017c8 	.word	0x080017c8
 8001780:	080017cc 	.word	0x080017cc

08001784 <memset>:
 8001784:	4603      	mov	r3, r0
 8001786:	4402      	add	r2, r0
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <memset+0xa>
 800178c:	4770      	bx	lr
 800178e:	f803 1b01 	strb.w	r1, [r3], #1
 8001792:	e7f9      	b.n	8001788 <memset+0x4>

08001794 <_init>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	bf00      	nop
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr

080017a0 <_fini>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	bf00      	nop
 80017a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a6:	bc08      	pop	{r3}
 80017a8:	469e      	mov	lr, r3
 80017aa:	4770      	bx	lr
